from google import genai
from google.genai import types
import logging
from django.core.files.base import ContentFile
from observation.models import Species

# Initialize a logger for this module
logger = logging.getLogger(__name__)

# Global client for google.genai, initialized when the module is loaded.
# Ensure API key is configured (e.g., GOOGLE_API_KEY environment variable).
client = None

def generate_text(contents, model_name='gemini-2.0-flash'):
    if client is None:
        client = genai.Client()
    response = client.models.generate_content(model=model_name, contents=contents, config=types.GenerateContentConfig(response_mime_type="application/json"))
    return response.text

def generate_illustration(species: Species) -> bool:
    try:
        if client is None:
            client = genai.Client()

        common_name = species.commonNames[0] if species.commonNames else species.scientificNameWithoutAuthor
        scientific_name = species.scientificNameWithoutAuthor
        prompt_text = f"illustration of a {common_name}, {scientific_name}, 19th century, transactions of the Natural History Museum Society of London"

        logger.info(f"Generating image for {scientific_name} with prompt: '{prompt_text}' using model imagen-4.0-generate-preview-06-06 via google.genai SDK")

        image_response = client.models.generate_images(
            model="imagen-4.0-generate-preview-06-06", # Hardcoded model name
            prompt=prompt_text
        )

        logger.info(f"Image generation API call completed for {scientific_name} using google.genai.")

        if image_response.generated_images:
            generated_image_object = image_response.generated_images[0] # Assuming the first image is desired

            # Accessing the image bytes. The structure is typically response.generated_images[0].image.image_bytes
            if not hasattr(generated_image_object, 'image') or not hasattr(generated_image_object.image, 'image_bytes'):
                # Fallback for different possible structures or if bytes are directly on the object
                if hasattr(generated_image_object, 'image_bytes'):
                     image_bytes = generated_image_object.image_bytes
                else:
                    logger.error(f"Generated image data for {scientific_name} via google.genai does not have the expected structure (e.g., image.image_bytes).")
                    return False
            else:
                image_bytes = generated_image_object.image.image_bytes

            if not image_bytes:
                logger.error(f"Image bytes are empty for {scientific_name} from google.genai.")
                return False

            file_name = f"{scientific_name.replace(' ', '_')}_illustration.png"

            species.illustration.save(file_name, ContentFile(image_bytes), save=False)
            species.save()

            logger.info(f"Successfully generated and saved illustration for {scientific_name} as {file_name} using google.genai. Illustration URL: {species.illustration.url if species.illustration else 'N/A'}")
            return True
        else:
            logger.warning(f"No images were generated by the API for {scientific_name} using google.genai.")
            return False

    except Exception as e:
        logger.error(f"An error occurred in generate_illustration for {scientific_name} (using google.genai): {e}", exc_info=True)
        return False
