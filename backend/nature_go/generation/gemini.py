import mimetypes
import struct
import base64
from google import genai
from google.genai import types
import logging



# Initialize a logger for this module
logger = logging.getLogger(__name__)

# Global client for google.genai, initialized when the module is loaded.
# Ensure API key is configured (e.g., GOOGLE_API_KEY environment variable).
client = None

def generate_text(contents, model_name='gemini-2.0-flash'):
    global client
    if client is None:
        client = genai.Client()
    response = client.models.generate_content(model=model_name, contents=contents, config=types.GenerateContentConfig(response_mime_type="application/json"))
    return response.text

def generate_image(text: str) -> bytes | None:
    try:
        global client
        if client is None:
            client = genai.Client()
        
        image_response = client.models.generate_images(
            model="imagen-3.0-generate-002", # Hardcoded model name
            prompt=text
        )

        logger.info(f"Image generation API call completed.")

        if image_response.generated_images:
            generated_image_object = image_response.generated_images[0].image

            # The API is returning a base64 encoded string in the `image_bytes` attribute.
            # This is a bit of a misnomer for the attribute name, but we handle it.
            # Let's check if the data exists before trying to decode.
            if not hasattr(generated_image_object, 'image_bytes') or not generated_image_object.image_bytes:
                logger.error(f"API response did not contain image data.")
                return None

            base64_encoded_string = generated_image_object.image_bytes

            # Decode the Base64 string into raw binary data
            try:
                image_bytes = base64.b64decode(base64_encoded_string)
            except (base64.binascii.Error, TypeError) as e:
                logger.error(f"Failed to decode base64 string: {e}")
                return None

            if not image_bytes:
                logger.error(f"Image bytes are empty after decoding.")
                return None

            logger.info(f"Successfully generated and saved illustration.")
            return image_bytes
        else:
            logger.warning(f"No images were generated by the API.")
            return None

    except Exception as e:
        logger.error(f"An error occurred in generate_image: {e}", exc_info=True)
        return None


def generate_audio(text):
    global client
    if client is None:
        client = genai.Client()

    model = "gemini-2.5-flash-preview-tts"
    contents = [
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(text=text),
            ],
        ),
    ]
    generate_content_config = types.GenerateContentConfig(
        temperature=1,
        response_modalities=[
            "audio",
        ],
        speech_config=types.SpeechConfig(
            voice_config=types.VoiceConfig(
                prebuilt_voice_config=types.PrebuiltVoiceConfig(
                    voice_name="Puck"
                )
            )
        ),
    )

    file_index = 0
    for chunk in client.models.generate_content_stream(
        model=model,
        contents=contents,
        config=generate_content_config,
    ):
        if (
            chunk.candidates is None
            or chunk.candidates[0].content is None
            or chunk.candidates[0].content.parts is None
        ):
            continue
        if chunk.candidates[0].content.parts[0].inline_data and chunk.candidates[0].content.parts[0].inline_data.data:
            file_index += 1
            inline_data = chunk.candidates[0].content.parts[0].inline_data
            data_buffer = inline_data.data
            file_extension = mimetypes.guess_extension(inline_data.mime_type)
            if file_extension is None:
                file_extension = ".wav"
                data_buffer = convert_to_wav(inline_data.data, inline_data.mime_type)
            return data_buffer, file_extension
        else:
            logger.info(chunk.text)


def convert_to_wav(audio_data: bytes, mime_type: str) -> bytes:
    """Generates a WAV file header for the given audio data and parameters.

    Args:
        audio_data: The raw audio data as a bytes object.
        mime_type: Mime type of the audio data.

    Returns:
        A bytes object representing the WAV file header.
    """
    parameters = parse_audio_mime_type(mime_type)
    bits_per_sample = parameters["bits_per_sample"]
    sample_rate = parameters["rate"]
    num_channels = 1
    data_size = len(audio_data)
    bytes_per_sample = bits_per_sample // 8
    block_align = num_channels * bytes_per_sample
    byte_rate = sample_rate * block_align
    chunk_size = 36 + data_size  # 36 bytes for header fields before data chunk size

    # http://soundfile.sapp.org/doc/WaveFormat/

    header = struct.pack(
        "<4sI4s4sIHHIIHH4sI",
        b"RIFF",          # ChunkID
        chunk_size,       # ChunkSize (total file size - 8 bytes)
        b"WAVE",          # Format
        b"fmt ",          # Subchunk1ID
        16,               # Subchunk1Size (16 for PCM)
        1,                # AudioFormat (1 for PCM)
        num_channels,     # NumChannels
        sample_rate,      # SampleRate
        byte_rate,        # ByteRate
        block_align,      # BlockAlign
        bits_per_sample,  # BitsPerSample
        b"data",          # Subchunk2ID
        data_size         # Subchunk2Size (size of audio data)
    )
    return header + audio_data


def parse_audio_mime_type(mime_type: str) -> dict[str, int | None]:
    """Parses bits per sample and rate from an audio MIME type string.

    Assumes bits per sample is encoded like "L16" and rate as "rate=xxxxx".

    Args:
        mime_type: The audio MIME type string (e.g., "audio/L16;rate=24000").

    Returns:
        A dictionary with "bits_per_sample" and "rate" keys. Values will be
        integers if found, otherwise None.
    """
    bits_per_sample = 16
    rate = 24000

    # Extract rate from parameters
    parts = mime_type.split(";")
    for param in parts: # Skip the main type part
        param = param.strip()
        if param.lower().startswith("rate="):
            try:
                rate_str = param.split("=", 1)[1]
                rate = int(rate_str)
            except (ValueError, IndexError):
                # Handle cases like "rate=" with no value or non-integer value
                pass # Keep rate as default
        elif param.startswith("audio/L"):
            try:
                bits_per_sample = int(param.split("L", 1)[1])
            except (ValueError, IndexError):
                pass # Keep bits_per_sample as default if conversion fails

    return {"bits_per_sample": bits_per_sample, "rate": rate}